# vim:ft=bash:foldmethod=marker

# {{{ PREAMBLE

source $HOME/.profile

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
SCRIPT_DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"

source $SCRIPT_DIR/utils/shell-colors.sh
source $SCRIPT_DIR/func/skp.sh

# }}}

# {{{ SHELL OPTIONS

# TODO: justify the existence of these options

enable_shopt() {
    local opt="$1"
    shopt -s "$opt" 2>/dev/null || echo -e "${YELLOW}${BOLD}[WARN] shell option '$opt' not supported.${NC}"
}

# {{{ file / path
enable_shopt dotglob     # include hidden files in globs
enable_shopt nocaseglob  # case-insensitive globbing
enable_shopt globstar    # ** for recursive globbing
enable_shopt dirspell    # autocorrect minor directory spelling errors
enable_shopt cdspell     # autocorrect minor cd spelling errors
enable_shopt autocd      # change to a directory by just typing its name
enable_shopt cdable_vars # cd to directory stored in variable
# }}}

# {{{ history
enable_shopt histappend # append to the history file, don't overwrite it
enable_shopt cmdhist    # save multi-line commands as single history entry
enable_shopt lithist    # save multi-line commands with line breaks
# }}}

# {{{ completion
enable_shopt progcomp     # enable programmable completion features
enable_shopt hostcomplete # hostname completion
enable_shopt sourcepath   # use the PATH variable to find source files
# }}}

# {{{ usability
enable_shopt checkwinsize         # check the window size after each command and update LINES and COLUMNS
enable_shopt interactive_comments # allow comments in interactive shells
enable_shopt checkhash            # check the command hash table before executing a command
enable_shopt lazydir              # delay directory validity check for pushd/popd (useful for NFS)
enable_shopt extglob              # extended pattern matching operators
# }}}

# {{{ safety
enable_shopt failglob # fail if a glob doesn't match
# }}}

# }}}

# {{{ VARIABLES

export GPG_TTY=$(tty)

# {{{ HISTORY
export HISTSIZE=10000
export HISTFILESIZE=1000000
export HISTFILE=~/.bash_history
export HISTCONTROL=ignoreboth
export HISTTIMEFORMAT='%F %T '
# }}}

# {{{ PAGER
# export PAGER=
# export MANPAGER=manbat
# }}}

# {{{ LESS BEAUTIFY

# Bold begin / end
export LESS_TERMCAP_mb="${BLUE}${BOLD}"
export LESS_TERMCAP_md="${BLUE}${BOLD}"
export LESS_TERMCAP_me="${RESET}"

# Underline begin / end
export LESS_TERMCAP_us="${GREEN}${BOLD}"
export LESS_TERMCAP_ue="${RESET}"

# Standout begin / end (yellow text + bold + blue background)
export LESS_TERMCAP_so="${YELLOW}${BOLD}${BG_BLUE}"
export LESS_TERMCAP_se="${RESET}"

# }}}

# }}}

# {{{ EXTERNAL

# {{{ bash-completion
if [ -v BASH_COMPLETION ] && [ -r "$BASH_COMPLETION" ]; then
    source "$BASH_COMPLETION"
elif [ -v PREFIX ] && [ -r "$PREFIX/share/bash_completion/bash_completion" ]; then
    source "$PREFIX/share/bash-completion/bash_completion"
elif [ -v TERMUX_VERSION ] && [ -r "/data/data/com.termux/files/usr/share/bash-completion/bash_completion" ]; then
    source "/data/data/com.termux/files/usr/share/bash-completion/bash_completion"
elif [ -r "/usr/share/bash-completion/bash_completion" ]; then
    source "/usr/share/bash-completion/bash_completion"
else
    echo -e "${YELLOW}${BOLD}[WARN] bash-completion not found. bash-completion unavailable.${NC}"
fi
# }}}

# {{{ fzf
if command -v fzf >/dev/null 2>&1; then
    eval "$(fzf --bash)"
else
    echo -e "${YELLOW}${BOLD}[WARN] fzf not found. fzf unavailable.${NC}"
fi
# }}}

# {{{ zoxide
if command -v zoxide >/dev/null 2>&1; then
    eval "$(zoxide init bash)"
else
    echo -e "${YELLOW}${BOLD}[WARN] zoxide not found. zoxide unavailable.${NC}"
fi
# }}}

# }}}

# {{{ FUNCTIONS

# {{{ run-help
# Thanks to Arch Wiki :)
run-help() { help "$READLINE_LINE" 2>/dev/null || man "$READLINE_LINE"; }
# }}}

# {{{ manbat
# TODO: Buggy, need to fix
manbat() {
  local width=$(tput cols)
  local ll=$((width * 2))
  sed "1i\\.nf\n.ll ${ll}n" | groff -Tutf8 -mandoc | bat -l man --paging=always
}
# }}}

# {{{ skp

# skp() {
#     pkg list-all 2>/dev/null | fzf -m --preview 'pkg show $(echo {} | cut -d"/" -f1) 2>/dev/null' --height 80% --reverse --border --inline-info --preview-window=down:80% | cut -d'/' -f1 | xargs -or pkg install
# }

# }}}

# {{{ rsync mvr/cpr
if command -v rsync >/dev/null 2>&1; then
  cpr() {
    rsync -a --info=stats1,progress2 --partial --modify-window=1 "$@"
  }
  mvr() {
    rsync -a --info=stats1,progress2 --partial --modify-window=1 --remove-source-files "$@"
  }
else
  echo -e "${YELLOW}${BOLD}[WARN] rsync not found. cpr/mvr unavailable.${NC}"
fi
# }}}

# {{{ unicodeof
unicodeof() {
    for i in $(echo "$*" | sed 's/\(.\)/\1 /g'); do
        printf "%s\tU+%04X\n" "$i" "'$i"
    done
}
# }}}

# {{{ new

new () {
    for i in "$@"; do
        mkdir -p "${i%/*}"
        touch "$i"
    done
}

# }}}

# {{{ rmcolor

rmcolor() {
    sed -r "s/\x1B\[[0-9;]*[mK]//g"
}

# }}}

# {{{ mkcd - mkdir & cd
mkcd() {
    mkdir -p -- "$1" && cd -- "$1"
}
# }}}

# {{{ tmpd
tmpd() {
    local dir
    dir=$(mktemp -d "${TMPDIR:-/tmp}/tmpd.XXXXXX") && echo "Created temporary directory: $dir"
    cd "$dir" || return
}
# }}}

# {{{ xargsn
xargsn() {
    xargs -r -n "${1:-1}"
}
# }}}

# }}}

# {{{ BINDINGS
bind -m vi-insert -x '"\eh": run-help'
bind -m emacs -x     '"\eh": run-help'
# }}}

# {{{ ALIASES

# {{{ dots cd

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'

# }}}

# {{{ grep

alias grep='grep --color=auto'
alias egrep='grep -irlE'
alias fgrep='grep -irlF'
if command -v rg >/dev/null 2>&1; then
    alias afind='rg -il'
elif command -v ack >/dev/null 2>&1; then
    echo -e "${YELLOW}${BOLD}[WARN] rg not found, but ack founded. afind falling back to ack${NC}"
    alias afind='ack -il'
else
    echo -e "${YELLOW}${BOLD}[WARN] rg/ack not found. afind falling back to grep.${NC}"
    alias afind='grep -irl'
fi

# }}}

# {{{ git
if command -v git >/dev/null 2>&1; then
    alias gc1='git clone --recursive --depth=1'
    alias gcl='git clone'
    alias gst='git status'
    alias gco='git checkout'
    alias gcm='git commit -m'
    alias gaa='git add .'
    alias gp='git push'
    alias gpl='git pull'
    alias gf='git fetch'
    alias gbr='git branch'
    alias gl='git log --oneline --graph --decorate --all'
    alias gss='git status -s'
    alias gd='git diff'
    alias gdc='git diff --cached'
    alias gca='git commit -a'
    alias gamend='git commit --amend'
    alias gundo='git reset --soft HEAD^'
    alias gcln='git clone --no-checkout'
    alias gpr='git pull --rebase'
    alias gcp='git cherry-pick'
    alias gsta='git stash'
    alias gstp='git stash pop'
    alias gsts='git stash show --text'
else
    echo -e "${YELLOW}${BOLD}[WARN] git not found. Git aliases unavailable.${NC}"
fi
# }}}

# {{{ noglob
if command -v noglob >/dev/null 2>&1; then
    alias globurl='noglob urlglobber '
else
    echo -e "${YELLOW}${BOLD}[WARN] noglob not found. globurl unavailable.${NC}"
fi
# }}}

# {{{ ls

if command -v exa >/dev/null 2>&1; then
    if command -v eza >/dev/null 2>&1 ; then
        echo -e "${YELLOW}${BOLD}[WARN] both exa and eza found. man, what can i say? eza will be used normally${NC}"
    else
        echo -e "${YELLOW}${BOLD}[WARN] exa found, though eza is not installed. exa will be used as eza. some compatibility issues may be caused.${NC}"
        alias eza='exa'
    fi
    echo -e "${BLUE}${BOLD}[INFO] eza is a fork of exa, serving as its maintained successor${NC}"
fi

if command -v eza >/dev/null 2>&1 ; then
  alias ls="eza --color=auto"
  alias l='eza -lbah'
  alias la='eza -labgh'
  alias ll='eza -lbg'
  alias lsa='eza -lbagR'
  alias lst='eza -lTabgh'  # Tree-style view
  alias lls='/bin/ls --color=auto'
  alias lll='lls -lah'
  alias lla='lls -lAh'
  alias lllll='lls -lh'
  alias llsa='lls -lah'
  alias supereza='eza -laghHimSuU --changed --time-style full-iso --octal-permissions --git --icons --extended'

  if command -v tree >/dev/null 2>&1; then
    alias llst='tree -Csh'
    alias lllst='tree -pCsh'
  else
    echo -e "${YELLOW}${BOLD}[WARN] tree not found, though eza is installed. llst/lllst disabled. please use lst for tree-style view${NC}"
  fi

else
  echo -e "${YELLOW}${BOLD}[WARN] eza not found. Falling back to ls.${NC}"

  alias ls='ls --color=auto'
  alias l='ls -lah'
  alias la='ls -lah'
  alias ll='ls -lh'
  alias lsa='ls -lR'
  alias lls='ls --color=auto'
  alias lll='ls -lah'
  alias lla='ls -lAh'
  alias lllll='ls -lh'
  alias llsa='ls -lah'
  alias supereza='ls -lah'

  if command -v tree >/dev/null 2>&1; then
    alias lst='tree -Csh'
    alias llst='tree -pCsh'
  else
    echo -e "${YELLOW}${BOLD}[WARN] tree not found. lst/llst disabled.${NC}"
  fi
fi
# }}}

# {{{ cat
if command -v bat >/dev/null 2>&1; then
    alias cat='bat -pp'
    alias lcat='/bin/cat'
else
    echo -e "${YELLOW}${BOLD}[WARN] bat not found. Falling back to cat.${NC}"
fi
# }}}

# {{{ fd
if command -v fd >/dev/null 2>&1; then
    alias fd='fd -HI'
else
    echo -e "${YELLOW}${BOLD}[WARN] fd not found. fd unavailable.${NC}"
fi
# }}}

# {{{ gh
if command -v gh >/dev/null 2>&1; then
    alias ghcs='gh copilot suggest'
else
    echo -e "${YELLOW}${BOLD}[WARN] gh not found. gh aliases unavailable.${NC}"
fi
# }}}

# {{{ todo.sh

if command -v todo.sh >/dev/null 2>&1; then
    alias t='todo.sh'
else
    echo -e "${YELLOW}${BOLD}[WARN] todo.sh not found. todo aliases unavailable.${NC}"
fi

# }}}

alias md='mkdir -p'
alias rd=rmdir

# }}}

# TODO: temp manager
